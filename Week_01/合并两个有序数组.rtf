{\rtf1\ansi\ansicpg936\cocoartf2569
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Monaco;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 //2020.09.13_#1_
\f1 \'d7\'d4\'bc\'ba
\f0 \
\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode() : val(0), next(nullptr) \{\}\
 *     ListNode(int x) : val(x), next(nullptr) \{\}\
 *     ListNode(int x, ListNode *next) : val(x), next(next) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) \{\
        if (l1 == NULL) \{\
            return l2;\
        \}\
        if (l2 == NULL) \{\
            return l1;\
        \}\
        \
        if (l1->val < l2->val) \{\
            l1->next = mergeTwoLists(l1->next, l2);\
            return l1;\
        \}\
        else\
        \{\
            l2->next = mergeTwoLists(l1, l2->next);\
            return l2;\
        \}\
    \}\
\};}